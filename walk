#!/bin/bash

# https://askubuntu.com/questions/968887/recursive-bash-script-to-collect-information-about-each-file-in-a-directory-stru

# Colourise the output
fg_color_default='\e[39m'
fg_color_black='\e[30m'
fg_color_red='\e[31m'
fg_color_green='\e[32m'
fg_color_yellow='\e[33m'
fg_color_blue='\e[34m'
fg_color_magenta='\e[35m'
fg_color_cyan='\e[36m'
fg_color_light_gray='\e[37m'
fg_color_dark_gray='\e[90m'
fg_color_light_red='\e[91m'
fg_color_light_green='e[92m'
fg_color_light_yellow='\e[93m'
fg_color_light_blue='\e[94m'
fg_color_light_magenta='\e[95m'
fg_color_light_cyan='\e[96m'
fg_color_white='\e[97m'


#RED='\033[0;31m'        # Red
#GRE='\033[0;32m'        # Green
#YEL='\033[1;33m'        # Yellow
#NCL='\033[0m'           # No Color
#BLU='\e[34m'            # Blue

echo "temp file for path storage"
sleep 1
sudo rm tmp_paths
touch tmp_paths


file_specification() {
        FILE_NAME="$(basename "${entry}")"
        DIR="$(dirname "${entry}")"
        NAME="${FILE_NAME%.*}"
        EXT="${FILE_NAME##*.}"
        SIZE="$(du -sh "${entry}" | cut -f1)"

        if [ "$EXT" = "py" ]; then

                printf "%*s${fg_color_green}%s${fg_color_white}\n"                    $((indent+4)) '' "${entry}"
                PYX_FILE=$entry"x"
                echo $PYX_FILE >> tmp_paths
                printf "%*s\tPyx File name:\t${fg_color_blue}%s${fg_color_white}\n"      $((indent)) '' "$PYX_FILE"

                #printf "%*s\tPyx File name:\t${GRE}%s${NCL}\n"      $((indent+4)) '' "$PYX_FILE"
                #cp -v $entry $PYX_FILE
                #echo ""

                #printf "%*s\tFile name:\t${YEL}%s${NCL}\n"      $((indent+4)) '' "$FILE_NAME"
                #printf "%*s\tDirectory:\t${YEL}%s${NCL}\n"      $((indent+4)) '' "$DIR"
                #printf "%*s\tName only:\t${YEL}%s${NCL}\n"      $((indent+4)) '' "$NAME"
                #printf "%*s\tExtension:\t${YEL}%s${NCL}\n"      $((indent+4)) '' "$EXT"
                #printf "%*s\tFile size:\t${YEL}%s${NCL}\n"      $((indent+4)) '' "$SIZE"
        fi


}

walk() {




        local indent="${2:-0}"
        printf "\n%*s${fg_color_red}%s${fg_color_white}\n\n" "$indent" '' "$1"
        # If the entry is a file do some operations
        for entry in "$1"/*; do 
                [[ -f "$entry" ]] && file_specification; 
        done

        # If the entry is a directory call walk() == create recursion
        for entry in "$1"/*; do 
                [[ -d "$entry" ]] && walk "$entry" $((indent+4)); 
        done
}

# If the path is empty use the current, otherwise convert relative to absolute; Exec walk()
[[ -z "${1}" ]] && ABS_PATH="${PWD}" || cd "${1}" && ABS_PATH="${PWD}"
walk "${ABS_PATH}"      
echo      