#!/bin/bash

# https://askubuntu.com/questions/968887/recursive-bash-script-to-collect-information-about-each-file-in-a-directory-stru

# Colourise the output
fg_color_default='\e[39m'
fg_color_black='\e[30m'
fg_color_red='\e[31m'
fg_color_green='\e[32m'
fg_color_yellow='\e[33m'
fg_color_blue='\e[34m'
fg_color_magenta='\e[35m'
fg_color_cyan='\e[36m'
fg_color_light_gray='\e[37m'
fg_color_dark_gray='\e[90m'
fg_color_light_red='\e[91m'
fg_color_light_green='e[92m'
fg_color_light_yellow='\e[93m'
fg_color_light_blue='\e[94m'
fg_color_light_magenta='\e[95m'
fg_color_light_cyan='\e[96m'
fg_color_white='\e[97m'


#RED='\033[0;31m'        # Red
#GRE='\033[0;32m'        # Green
#YEL='\033[1;33m'        # Yellow
#NCL='\033[0m'           # No Color
#BLU='\e[34m'            # Blue

# Start of the script
cat license.txt 
echo "Tool    : bulk convert python files to shared objects"
echo "Author  : David Lejeune"
echo "Created : 05/09/2018"
echo ""
sleep 1

echo "Creating temp file for path storage"
sudo rm -v tmp_paths
touch tmp_paths
ls -alh tmp_paths
sleep 0.5


handle_file() {

        # File variables
        FILE_NAME="$(basename "${entry}")"
        DIR="$(dirname "${entry}")"
        NAME="${FILE_NAME%.*}"
        EXT="${FILE_NAME##*.}"
        SIZE="$(du -sh "${entry}" | cut -f1)"


        # Check if the file has a .py extension"
        if [ "$EXT" = "py" ]; then

                # py >>> pyx 
                PYX_FILE=$entry"x"
                cp $entry $PYX_FILE

                # Pyx File variables
                PYX_FILE_NAME="$(basename "${PYX_FILE}")"
                PYX_DIR="$(dirname "${PYX_FILE}")"
                PYX_NAME="${PYX_FILE_NAME%.*}"
                PYX_EXT="${PYX_FILE_NAME##*.}"
                PYX_SIZE="$(du -sh "${PYX_FILE}" | cut -f1)"

                # output the files details                
                printf "%*s\tFile name:\t${fg_color_gray}%s${fg_color_white}\n"      $((indent+1)) '' "$FILE_NAME"
                printf "%*s\tPyx File name:\t${fg_color_blue}%s${fg_color_white}\n"      $((indent)) '' "$PYX_FILE_NAME"

                # log the new file name
                echo $PYX_FILE >> tmp_paths

                # Output the pyx file details
                check_file_existence "$PYX_FILE"
                echo ""
                
                #printf "%*s\tPyx File name:\t${fg_color_blue}%s${fg_color_white}\n"      $((indent)) '' "$PYX_FILE"
                #printf "%*s${fg_color_green}%s${fg_color_white}\n"                    $((indent+1)) '' "${entry}"
                #printf "%*s\tFile name:\t${YEL}%s${NCL}\n"      $((indent+1)) '' "$FILE_NAME"
                #printf "%*s\tDirectory:\t${YEL}%s${NCL}\n"      $((indent+1)) '' "$DIR"
                #printf "%*s\tName only:\t${YEL}%s${NCL}\n"      $((indent+1)) '' "$NAME"
                #printf "%*s\tExtension:\t${YEL}%s${NCL}\n"      $((indent+1)) '' "$EXT"
                #printf "%*s\tFile size:\t${YEL}%s${NCL}\n"      $((indent+1)) '' "$SIZE"
        fi


}

walk() {

        local indent="${2:-0}"
        printf "\n%*s${fg_color_red}%s${fg_color_white}\n\n" "$indent" '' "$1"

        # If the entry is a file do some operations
        for entry in "$1"/*; do 
                [[ -f "$entry" ]] && handle_file; 
        done

        # If the entry is a directory call walk() == create recursion
        for entry in "$1"/*; do 
                [[ -d "$entry" ]] && walk "$entry" $((indent+1)); 
        done
}

check_file_existence() {
        FILE=$1    
        if [ -f $FILE ]; then
                 printf "%*s\tpyx file :\t${fg_color_light_yellow}%s${fg_color_gray}\n"      $((indent+1)) '' "created succesfully"
        else
                 printf "%*s\tpyx file :\t${fg_color_light_red}%s${fg_color_gray}\n"      $((indent+1)) '' "failed to create"
        fi
        printf "%s${fg_color_default}"
}



# If the path is empty use the current, otherwise convert relative to absolute; Exec walk()
[[ -z "${1}" ]] && ABS_PATH="${PWD}" || cd "${1}" && ABS_PATH="${PWD}"
walk "${ABS_PATH}"      
echo   

echo "Creating the setup.py file"

echo "Creating the .so files"

echo "Archiving the .so files"